plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"discord-fabric-commands" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// JDA (Java Discord API) and its critical dependencies
	// Use implementation include(...) to ensure they're bundled into your mod's JAR file.
	implementation include("net.dv8tion:JDA:${project.jda_version}")
	implementation include("net.sf.trove4j:trove4j:${project.trove4j_version}")
	implementation include("com.squareup.okhttp3:okhttp:${project.okhttp_version}")
	implementation include("com.squareup.okio:okio:${project.okio_version}") // OkHttp depends on Okio
	implementation include("com.squareup.okio:okio-jvm:${project.okio_version}")
	implementation include("org.jetbrains.kotlin:kotlin-stdlib:${project.kotlin_stdlib_version}") // Kotlin Standard Library
	implementation include("com.neovisionaries:nv-websocket-client:${project.nv_websocket_client_version}")
	implementation include("org.apache.commons:commons-collections4:${project.commons_collections4_version}")

	// SLF4J binding for JDA logging
	// JDA uses SLF4J, Minecraft uses Log4j.
	implementation "org.slf4j:slf4j-simple:2.0.12"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}